---
title: Developing and Deploying .NET Apps
owner: Greenhouse
---

<strong><%= modified_date %></strong>

This topic lists resources for developing .NET apps that run on Pivotal Application Service (PAS) for Windows, and describes how to push .NET apps to PAS for Windows cells.

For how to develop .NET microservices for .NET apps using Steeltoe, see the [Steeltoe documentation](http://steeltoe.io/docs/).

## <a id='overview'></a> Overview

After operators install and configure the PAS for Windows tile, developers can push .NET apps to the Windows cell. For documentation about installing the PAS for Windows tile, see the [Installing and Configuring PAS for Windows](installing.html) topic. Developers can push both [OWIN](http://owin.org/) and non-OWIN apps, and can push apps that are served by [Hostable Web Core](#push) or [self-hosted](#self-hosted).

Operators must also install the Cloud Foundry Command Line Interface (cf CLI) to run the commands on this topic. For information about installing the cf CLI, see the [Installing the cf CLI](https://docs.pivotal.io/pivotalcf/cf-cli/install-go-cli.html) topic.

If you have upgraded to PAS for Windows and have apps that you want to migrate, see the [Upgrading Cells](upgrade-windows.html) topic.

##<a id='develop'></a> Develop .NET Apps

###<a id='cookbook'></a> .NET on PCF Cookbook

The [.NET Cookbook](https://dotnet-cookbook.cfapps.io/intro/) has useful tips and recipes for developing .NET apps to run on PAS for Windows.

###<a id='shutdown'></a> Handle Shutdown Events

To gracefully handle system shutdown events, .NET apps running on PAS for Windows cells need to include a control handler function that responds to `CTRL_CLOSE_EVENT` and `CTRL_SHUTDOWN_EVENT` system event messages.

PAS for Windows apps do not receive `CTRL_C_EVENT`, `CTRL_BREAK_EVENT`, or `CTRL_LOGOFF_EVENT` messages, so your control handler can ignore them.

For guidance, see the [Registering a Control Handler Function](https://docs.microsoft.com/en-us/windows/console/registering-a-control-handler-function) and [SetConsoleCtrlHandler function](https://docs.microsoft.com/en-us/windows/console/setconsolectrlhandler) topics in the Microsoft documentation.

##<a id='push'></a> Push a .NET App

By default, PCF serves .NET apps with Hostable Web Core (HWC). HWC is a lighter version of the Internet Information Services (IIS) server that contains the core IIS functionality.

Perform the following steps to push a .NET app to a Windows cell:

1. Run `cf api api.YOUR-SYSTEM-DOMAIN` to target the Cloud Controller of your PCF deployment:
    <pre class="terminal">
    $ cf api api.YOUR-SYSTEM-DOMAIN
    </pre>

1. Run one of the following commands to deploy your .NET app, replacing `APP-NAME` with the name of your app.
    <br><br>
    * If you want to deploy a .NET Framework app, run `cf push APP-NAME -s windows2016 -b hwc_buildpack`:
    <pre class="terminal">
    $ cf push APP-NAME -s windows2016 -b hwc_buildpack
    </pre>
    * If you want to deploy an app with <code>.bat</code> or <code>.exe</code> files, run `cf push -s windows2016 -b binary_buildpack`:
    <pre class="terminal">$ cf push -s windows2016 -b binary_buildpack</pre>
    <br>
    The `-s windows2016` option instructs PCF to run the app in the Windows cell. If you are not pushing your app from its directory, use the `-p` option and specify the path to the directory that contains the app.

1. Wait for your app to stage and start. If you see an error message, refer to the [Troubleshoot App Errors](#troubleshoot) section of this topic.

###<a id='context-routing'></a>Context Path Routing Support for ASP.NET Apps</a>

ASP.NET developers can host applications under a route path. 
Within Windows cells, you can have multiple routes to an app, but those routes cannot have different context paths.

For example, if you would like to route `APP-NAME-TWO` under `APP-NAME-ONE`, in order to create the `APP-NAME-ONE.example-domain.com/APP-NAME-TWO` path:

1. Run `cf push APP-NAME-ONE` to push the primary app.</br>
    <pre class="terminal">
    $ cf push APP-NAME-ONE
    </pre>

1. Run `cf push APP-NAME-TWO --hostname APP-NAME-ONE --route-path APP-NAME-TWO` to map the route of the secondary app under the primary app.
    <pre class="terminal">
    $ cf push APP-NAME-TWO --hostname APP-NAME-ONE --route-path APP-NAME-TWO
    </pre>

If you need to use a non-default domain, add the domain option (`-d`) followed by your chosen domain address to the `cf-push` command from Step 2.

##<a id='self-hosted'></a> Push a Self-Hosted App

Developers can choose to push a self-hosted app instead of using Hostable Web Core. Self-hosted apps combine server code with the app code.

Perform the following steps to push a self-hosted app:

1. Run `cf api api.YOUR-SYSTEM-DOMAIN` to target the Cloud Controller of your PCF deployment:
    <pre class="terminal">
    $ cf api api.YOUR-SYSTEM-DOMAIN
    </pre>

1. Run `cf push APP-NAME -s windows2016 -b binary_buildpack -c PATH-TO-BINARY` to push your .NET app from the app root. Replace `APP-NAME` with the name of your app and `PATH-TO-BINARY` with the path to your executable.

    <pre class="terminal">
    $ cf push APP-NAME -s windows2016 -b binary_buildpack -c PATH-TO-BINARY
    </pre>

1. Wait for your app to stage and start. If you see an error message, refer to the [Troubleshoot App Errors](#troubleshoot) section of this topic.

##<a id='soap'></a> Push a SOAP Service

Developers can push Simple Object Access Protocol (SOAP) web services to their PCF deployment by following the procedures in the sections below.

###<a id='push-soap'></a> Step 1: Deploy Your Web Service

Perform the following steps to deploy a SOAP web service:

1. Develop the service as an ASMX web service in Microsoft Visual Studio.
1. Publish the service to your local file system.
1. Run `cf push SERVICE-NAME -s windows2016 -b hwc_buildpack -u none` to push your service from the directory containing the published web service. Replace `SERVICE-NAME` with the name of your service:
    <pre class="terminal">
    $ cf push SERVICE-NAME -s windows2016 -b hwc_buildpack -u none
    </pre>
    <br>
    The push command must include the `-s` flag to specify the stack as `windows`, which instructs PCF to run the app in the Windows cell.
    <br><br>
    The push command can include the following optional flags:
    * If you are not pushing your service from the directory containing the published web service, use the `-p` flag to specify the path to the directory that contains the published web service.
    * If you do not have a route serving `/`, use the `-u none` flag to disable the health check.

1. Locate the section of the terminal output that displays the URL of the web service:

    <pre class='terminal'>
    requested state: started
    instances: 1/1
    usage: 1G x 1 instances
    urls: YOUR-WEB-SERVICE.YOUR-DOMAIN
    last uploaded: Thu Nov 17 19:18:19 UTC 2016
    stack: windows
    buildpack: hwc_buildpack
    </pre>

###<a id='correct-wsdl'></a> Step 2: Modify the WSDL File

Your SOAP web service is now deployed on PCF, but the service's WSDL file contains the incorrect port information. Before an application can consume your web service, either you or the application developer must modify the WSDL file.

Examine the following portion of an example WSDL file:

```
- <wsdl:service name="WebService1">
  - <wsdl:port name="WebService1Soap" binding="tns:WebService1Soap">
      <soap:address location="http://webservice.example.com:62492/WebService1.asmx"/>
    </wsdl:port>
  - <wsdl:port name="WebService1Soap12" binding="tns:WebService1Soap12">
      <soap12:address location="http://webservice.example.com:62492/WebService1.asmx"/>
    </wsdl:port>
- </wsdl:service>
```

The WSDL file provides the port number for the SOAP web service as `62492`. This is the port that the web service listens on in the [Garden container](https://docs.pivotal.io/pivotalcf/concepts/container-security.html#mechanics), but external applications cannot access the service on this port. Instead, external applications must use port `80`, and the [Gorouter](https://docs.pivotal.io/pivotalcf/concepts/architecture/router.html) routes requests to the web service in the container.

The URL of the web service in the WSDL file must be modified to remove `62492`. With no port number, the URL defaults to port `80`. In the example above, the modified URL would be `http://webservice.example.com/WebService1.asmx`.

SOAP web service developers can resolve this problem in one of two ways:

* Modify the WSDL file by following the instructions in [Modify a Web Serviceâ€™s WSDL Using a SoapExtensionReflector](https://blogs.msdn.microsoft.com/kaevans/2005/11/16/modify-a-web-services-wsdl-using-a-soapextensionreflector/) from the Microsoft Developers Network.

* Instruct the developers of external applications that consume the web service to perform the steps in the [Consume the SOAP Web Service](#consume) section of this topic.

####<a id='consume'></a>Consume the SOAP Web Service

Developers of external applications that consume the SOAP web service can perform the following steps to use a modified version of the WSDL file:

1. In a browser, navigate to the WSDL file of the web service.
    <br><br>
    You can reach the WSDL of your web service by constructing the URL as follows:
    `YOUR-WEB-SERVICE.YOUR-DOMAIN/ASMX-FILE.asmx?wsdl`
    <br><br>
	See the following URL as an example:
    `https://webservice.example.com/WebService1.asmx?wsdl`

1. Download the WSDL file to your local machine.
1. Edit the WSDL file to eliminate the container port, as described in the [Modify the WSDL File](#correct-wsdl) section of this topic.
1. In Microsoft Visual Studio, right-click on your application in the **Solution Explorer** and select **Add** > **Service Reference**.
1. Under **Address**, enter the local path to the modified WSDL file. For example, `C:\Users\example\wsdl.xml`.
1. Click **OK**. Microsoft Visual Studio generates a client from the WSDL file that you can use in your codebase.

####<a id='context-routing-soap'></a>Context Path Routing Support for SOAP Web Services

Developers can push SOAP web services to their PCF deployment with context path routing. For more information, see the [Context Path Routing Support for ASP.NET Apps](#context-routing) section.

##<a id='troubleshoot'></a> Troubleshoot App Errors

If a .NET app fails to start, consult the following list of errors and their possible solutions:

* `NoCompatibleCell`: Your PCF deployment cannot connect to your Windows cell. See the [Troubleshooting Windows Cells](troubleshooting.html) topic for information about troubleshooting your Windows cell configuration.

* `Start unsuccessful`: Your app may not contain the required DLL files and dependencies. Ensure that you are pushing from a directory containing your app dependencies, or specify the directory with the `-p` flag. Your app also may be misconfigured. Ensure that your app directory contains either a valid `.exe` binary or a valid `Web.config` file.
