---
title: Installing and Configuring TAS for VMs [Windows]
owner: Windows
---

This topic tells you how to install and configure the <%= vars.windows_runtime_full %> tile.

The <%= vars.windows_runtime_abbr %> tile installs Windows Diego Cells in your <%=
vars.platform_name %> deployment.

The <%= vars.windows_runtime_abbr %> tile inherits settings from the <%= vars.app_runtime_full %>
(<%= vars.app_runtime_abbr %>) tile and also includes additional configuration settings.

To install, configure, and deploy <%= vars.windows_runtime_abbr %>:

* In an environment with Internet access:
    1. Complete the prerequisites. See [Prerequisites](#prerequisites).
    1. Download and install the <%= vars.windows_runtime_abbr %> tile. See [Install the
       Tile](#install).
    1. Configure required settings for the tile. See [Configure the Tile](#config).
    1. Configure resources for the tile. See [Configure Tile Resources](#resources).
    1. Upload the Windows stemcell to the tile. See [Upload the Stemcell](#stemcells).
    1. Deploy the tile. See [Deploy the Tile](#deploy).

* In an air gap environment, complete the steps in
[Install and Configure <%= vars.windows_runtime_abbr %> in an Air-Gapped Environment](#air-gapped) below.

## <a id='prerequisites'></a> Prerequisites

Before you install and configure the <%= vars.windows_runtime_abbr %> tile, ensure that you meet the
requirements to use the **Windows FS Injector** tool. For more information, see [Windows FS injector
prerequisites](#prerequisite-injector).

### <a id='prerequisite-injector'></a> Windows FS Injector prerequisites

You use the **Windows FS Injector** tool to install the <%= vars.windows_runtime_abbr %> tile. The
**Windows FS Injector** tool requires:

* The `git` and `tar` executables must be in your `%PATH%`. If `git` and `tar` are not in your
  `%PATH%`, either add your `git` and `tar` executable locations to your existing `%PATH%`
  configuration, or copy the `git.exe` and `tar.exe` executable files to a directory in your
  `%PATH%`.

* Your installation environment must allow the **Windows FS Injector** tool access to all of the following URLs:
  * https://network.pivotal.io, for downloading the tile and injector
  * https://s3.amazonaws.com/
  * https://registry.hub.docker.com/
  * https://production.cloudflare.docker.com
  * https://go.microsoft.com/
  * https://winlayers.cdn.mscr.io
  * https://mcr.microsoft.com
  * https://msecnd.net, or any domain within the Microsoft Windows Azure Content Delivery Network
  For more information about the Windows Azure Content Delivery Network, see [Introducing the Windows Azure Content Delivery Network](https://azure.microsoft.com/en-us/blog/introducing-the-windows-azure-content-delivery-network/) in the Microsoft Azure documentation.

  <p class="note"><strong>Note:</strong> To ensure the authenticity of Microsoft container images, Microsoft does not permit the distribution of its base images. This includes Microsoft container images consumed through Docker Hub, which are actually delivered by an Microsoft CDN endpoint.</p>

## <a id='install'></a> Installing the <%= vars.windows_runtime_abbr %> tile

To install the <%= vars.windows_runtime_abbr %> tile: <%# After adding or removing a step here be
    sure to change the step number for step 4 in the air-gapped environment section.
    %>

1. Go to the [<%= vars.windows_runtime_full %>](https://network.pivotal.io/products/pas-windows)
   page on <%= vars.product_network %>. <%# After adding or removing a step here be sure to change
    the step number for step 4 in the air-gapped environment section.  %>

1. Download the **<%= vars.windows_runtime_full %>** product file. <%# After adding or removing a
    step here be sure to change the step number for step 4 in the air-gapped
  environment section.  %>

1. Download the **Windows FS Injector** tool for your workstation OS. The Injector tool,
   `winfs-injector`, is an executable binary file that adds the Windows Server container base image
   into the product file. This step requires Internet access and can take up to 20 minutes.

  <p class="note"><strong>Note:</strong> You need the <code>git</code> and <code>tar</code> executable files in your <code>%PATH%</code> to run <code>winfs-injector.exe</code>. For example, copy <code>git.exe</code> and <code>tar.exe</code> to a directory in your <code>%PATH%</code>.</p>
    <%# After adding or removing a step here be sure to change the step number for step 4 in the air-gapped environment section.  %>

1. Add the Windows Server container base image to the product file:

    ```console
    winfs-injector ^
      --input-tile PASW-DOWNLOAD-PATH ^
      --output-tile PASW-IMPORTABLE-PATH
    ```

    Where:
    * `PASW-DOWNLOAD-PATH` is the path and filename to the <%= vars.windows_runtime_abbr %> product
      file you downloaded.
    * `PASW-IMPORTABLE-PATH` is the output path for the importable product file. <br>
    For example:
    <pre class="terminal">
    C:\Users\admin\> winfs-injector ^
    --input-tile c:\temp\pas-windows-2.9.0-build.1.pivotal ^
    --output-tile c:\temp\pas-windows-2.9.0-build.1-INJECTED.pivotal
    </pre>

    This step takes up to 20 minutes to complete.

<p class="note"><strong>Note:</strong> If you have the `BOSH_ALL_PROXY` environment variable set, this can cause the <code>winfs-injector</code> to fail, with an error like the following:
<br><code>
-- Failed downloading 'golang-1-windows/789a42163ee8b705cfcd8a62e590d5cbf01322c773497d6c53247cf6a4e39965' (sha1=sha256:55db4fe9804edfff5f01c5cee0d2541333a71f40c905135912c9c22783e038c1)
</code><br>
    If this happens, un-set the `BOSH_ALL_PROXY` environment variable, and then try again.</p>

1. Go to the Ops Manager Installation Dashboard and click **Import a Product**.

2. To add the <%= vars.windows_runtime_abbr %> tile to the **Import a Product** product list, select
   the importable `PASW-IMPORTABLE-PATH` file on your workstation.

3. To add the <%= vars.windows_runtime_abbr %> tile to your staging area, click **+** under the
   **<%= vars.windows_runtime_full %>** product listing.

## <a id='config'></a> Configuring the <%= vars.windows_runtime_abbr %> tile

The following sections describe how to configure the settings for the <%= vars.windows_runtime_abbr
%> tile.

### <a id='config-azs-networks'></a> Assigning availability zones and networks

Assign jobs to your Availability Zones (AZs) and networks.

To configure AZs and networks:

1. Click the <%= vars.windows_runtime_abbr %> tile.

1. Select **Assign AZs and Networks** or **Assign Networks**. The name of the pane varies depending
   on your IaaS.

1. Select the first AZ under **Place singleton jobs**. Ops Manager runs any job with a single
   instance in this AZ.

1. Select all AZs under **Balance other jobs**. Ops Manager balances instances of jobs with more
   than one instance across the AZs that you specify.
  <p class='note'><strong>Note:</strong> For production deployments, VMware recommends at least three AZs for a highly available installation.</p>

1. From the **Network** drop down menu, choose the runtime network that you created when you configured the BOSH Director tile.

1. Click **Save**.

### <a id='config-vms'></a> Configuring VMs

In **VM Options**, you configure settings for accessing your VMs.

To configure VM access:

1. Click **VM Options**.

1. Select one of the following for **Administrator passwords**:

* To randomize the admin password, select **Use randomized password**. If you select this option, the admin password is not retrievable by an operator. This is the default selection.
* To set the same admin password for every Windows Diego Cell, select **Configure a password** and enter a password in **Password**. If you select this option, it specifies a password for all VMs that can be used to access any Windows Diego Cell.

1. (Optional) To start the Microsoft beta port of the OpenSSH daemon on port 22 for all VMs, select the **Access VMs with BOSH SSH (beta))** check box. If you select this option, it allows users to SSH into Windows VMs with the `bosh ssh` command and enter a CMD terminal as an admin user.

2. (Optional) To configure a Key Management Service (KMS) that your volume-licensed Windows Diego Cell can register with:
    1. Under **KMS**, select **Use**.
    2. For the **Hostname** field, enter the hostname for your KMS server.
    3. For the **Port** field, enter he port number of your KMS server. The default port number is 1688.

3. Click **Save**.

### <a id='config-smoke-tests'></a> Configuring Smoke Tests

In **Smoke Tests**, you specify the org and space where smoke tests are run.

In the org and space that you specify, the Smoke Test errand pushes an app to the org. The app runs
basic function tests against your <%= vars.windows_runtime_abbr %> deployment after an installation
or update.

The Smoke Test errand is on by default. You can deactivate the Smoke Test errand in the **Errands**
pane. For more information, see [Configure Errands](#config-errands).

For help configuring these fields, see
[Configure Smoke Tests](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/4.0/tas-for-vms/installing.html#configure-smoke-tests-7)
in _Installing and Configuring TAS for VMs [Windows]_ in the VMware documentation.


To configure smoke tests:

1. Select **Smoke Tests**, followed by one of these options:

1. If you have a shared apps domain, select **A temporary space within the system org**, which creates a temporary space within the system org for running smoke tests and deletes the space afterwards. Otherwise, select **Smoke test location** a specified domain, org, and space.
   Complete the following fields to configure where <%= vars.windows_runtime_abbr %> pushes an app to run smoke tests:
   * For **Smoke test location**, enter the location where to deploy apps when running smoke tests.
   * For **Org**, enter the org <%= vars.windows_runtime_abbr %> you can use when pushing an app to run smoke tests.
   * For **Space**, enter the space <%= vars.windows_runtime_abbr %> you can use when pushing an app to run smoke tests.
    * For **Apps Domain**, enter the domain <%= vars.windows_runtime_abbr %> you can use when pushing an app to run smoke tests.

### <a id='config-advanced-features'></a> Configuring advanced features

**Advanced Features** includes new functions that might have certain constraints. Although these
features are fully supported, VMware recommends caution when using them in production environments.

For help configuring these fields, see
[Configure Advanced Features](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/4.0/tas-for-vms/installing.html#configure-advanced-features-8)
in _Installing and Configuring TAS for VMs [Windows]_ in the VMware documentation.

The following sections describe how to configure the advanced features.

#### <a id='config-memory-disk'></a> Diego Cell memory and disk overcommit

If your apps do not use the full allocation of disk space and memory set in **Resource Config**, you
use this feature. These settings control the amount to overcommit disk and memory resources to each
host VM.

For example, you can to use the overcommit if your apps use a small amount of disk and memory
capacity compared to the amounts set in the **Resource Config** settings for **Windows Diego Cell**.

<p class="note"><strong>Note:</strong> Due to the risk of app failure and the deployment-specific nature of disk and memory use, VMware has no recommendation for how much, if any, memory or disk space to overcommit.</p>

To enable overcommit:

1. Select **Advanced Features**.

2. In the **Diego Cell memory capacity** field, enter the value in MB for the total amount of memory to allocate to each Diego Cell. See the **Diego Cell** row in **Resource Config** for the current Diego Cell memory capacity settings that this field overrides.

3. In the **Diego Cell disk capacity** field, enter the value in MB, for the total amount of disk to allocate to each Diego Cell. See the **Diego Cell** row in **Resource Config** for the current Diego Cell disk capacity settings that this field overrides.

4. Click **Save**.

<p class="note"><strong>Note:</strong> Entries made to each of these two settings set the total amount of resources allocated, not the overage.</p>

#### <a id='enable-route-integrity'></a> Gorouter app identity verification (beta)

You can choose the method the Gorouter uses to verify app identity. Verifying app identity using TLS
or mutual TLS (mTLS) enables encryption between the Gorouter and app containers and guards against
misrouting during control plane failures. This feature is disabled by default.

For more information about Gorouter route consistency modes, see [Preventing
Misrouting](../concepts/http-routing.html#consistency) in _HTTP Routing_.

To configure app identity verification:

1. Select **Advanced Features**.

1. Under **Gorouter app identity verification (beta)**, select one of the
following options:

      * **The Gorouter uses TLS to verify app identity**: Activates the Gorouter
      to verify app identity using TLS. This is the default option.
      * **The Gorouter and apps use mutual TLS to verify each other's identity**.
      * **Disallow app identity verification and mutual TLS**: Deactivates app identity
      verification and mutual TLS.
      Activates the Gorouter and your apps to verify each other's identity using
      TLS.
      Before you turn on this option, be aware of the following:
          * This option deactivates TCP routing because app containers accept incoming
      communication only from the Gorouter.
          * If you activate mTLS in the <%= vars.windows_runtime_abbr %> tile, you
          must also activate mTLS in the <strong>App Containers</strong> pane of the
          <%= vars.app_runtime_abbr %> tile.
          * You need v2.3 or later of both <%= vars.app_runtime_abbr %> and
          Isolation Segment. The Gorouter and Diego Cell components in
          <%= vars.platform_old %> v2.2 and earlier do not support mTLS handshakes.

1. Click **Save**.

#### <a id='custom-cell-overlay'></a> Custom Windows Diego Cell overlay subnet

The IP range for the overlay network of your Windows Diego Cell. The default range is `172.30.0.0/22`.

IP address space for container networking. If this conflicts with any internal IP addresses that your
organization uses, you can customize this subnet. Unlike in <%= vars.windows_runtime_abbr %> deployments using Linux Diego Cells, you configure this subnet
per Diego Cell. When you configure a custom subnet for a Windows Diego Cell, ensure the following:

* The CIDR range of your custom subnet does not conflict with any resources that your apps might
  need to use.

* The subnet is large enough to accommodate the number of apps you expect to have running on each
  Diego Cell.

To configure a custom Windows Diego Cell overlay subnet:

1. In the <%= vars.windows_runtime_abbr %> tile, select **Advanced Features**.

2. For **Diego Cell overlay subnet**, enter the subnet you want to configure for your Diego Cell.

  WARNING: Setting the subnet too small limits the number of containers that can run on each Windows Diego Cell.

3. Click **Save**.

### <a id='config-errands'></a> Configuring errands

Errands are scripts that Ops Manager runs automatically when it installs or uninstalls a product,
such as a new version of <%= vars.windows_runtime_abbr %>. There are two types of errands:
_post-deploy errands_ run after the product is installed, and _pre-delete errands_ run before the
product in uninstalled.

By default, Ops Manager runs all errands.

In **Errands**, you can change these run rules. For each errand, you can select **On** to run it
each time Ops Manager installs or uninstalls a product, or **Off** to never run it.

For more information about how Ops Manager manages errands, see [Managing Errands in Ops Manager](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/3.0/vmware-tanzu-ops-manager/install-managing_errands.html).

To configure errands:

1. Select **Errands**.

1. To ensure that you receive the most up-to-date HWC buildpack, set the **Install HWC Buildpack
   Errand** to **On**.

1. To ensure that a smoke test is run against your <%= vars.windows_runtime_abbr %> installation,
   set the **Smoke Test Errand** to **On**.

1. Click **Save**.

<p class="note"><strong>Note:</strong> This beta feature checks only that the client certificate is signed by the CA using mTLS. It does not include SAN (Subject Alternative Name) checks of the presented client certificates.</p>

### <a id='config-iso-segments'></a> Configuring Isolation Segments (Optional)

To deploy your <%= vars.windows_runtime_abbr %> app workloads to an isolation segment, select **App
Containers** and follow the procedure in [Assign a Tile to an Isolation
Segment](./isolation.html#assign-isolation) in _Windows Diego Cells in Isolation Segments_.

### <a id='config-windows-authentication'></a> (Optional) Configure Windows Authentication

To configure Windows Diego Cells to allow app containers to perform Windows Authentication, select
**Windows Authentication** and follow the procedure in [Configuring the tile for Windows
Authentication](./windows-authentication.html#configure-tile) in _Windows Authentication for .NET
apps_.

<p class="note"><strong>Note:</strong> VMware strongly recommends using an isolation segment for Windows Authentication, as all apps in the <%= vars.windows_runtime_abbr %> installation have have access to the GMSA credentials.</p>

### <a id='config-system-logging'></a> Configuring System Logging (Optional)

To configure Windows Diego Cells to send VM logs to an external syslog server, select **System
Logging** and follow the procedure in [Forwarding Logs to a Syslog
Server](troubleshooting.html#syslog) in _Troubleshooting Windows Diego Cells_.

### <a id='dns-search-domains'></a> Configuring DNS Search Domains (Optional)

To configure DNS search domains for your app containers:

1. Click the <%= vars.app_runtime_full %> tile in the **Installation Dashboard**.
1. Select the **Networking** pane.
1. In the **DNS search domains** text box, enter DNS search domains as a comma-separated list.
1. Click **Save**.

## <a id='resources'></a> Configuring tile resources

In **Resource Config**, you must associate load balancers with the VMs in your deployment to enable
traffic.

To configure your tile resources:

1. Select **Resource Config**.

2. Use the drop-down menus to configure **Windows Diego Cell**. The following table shows the
   recommended Windows Diego Cell disk size for your IaaS:
  <table>
    <tr>
      <th>IaaS</th>
      <th>Recommended Windows Diego Cell Disk Size</th>
    </tr>
    <tr>
      <th>AWS</th>
      <td>100&nbsp;GB</td>
    </tr>
    <tr>
      <th>Azure</th>
      <td>150&nbsp;GB</td>
    </tr>
    <tr>
      <th>GCP</th>
      <td>150&nbsp;GB</td>
    </tr>
    <tr>
      <th>vSphere</th>
      <td>100&nbsp;GB</td>
    </tr>
  </table>
  <p class="note"><strong>Note:</strong> Windows stemcells in the v2019.x line support ephemeral disks.</p>

1. Provision your **Master Compilation Job** with at least 100&nbsp;GB of disk space.

2. Click **Save**.

## <a id='stemcells'></a> Uploading the stemcell

After configuring resources for the <%= vars.windows_runtime_abbr %> tile, you must upload the
Windows stemcell to the tile.

To upload the stemcell:

1. In the <%= vars.windows_runtime_abbr %> tile, select **Stemcell Library**.

1. Retrieve the stemcell that you downloaded or created in [Downloading or Creating a Windows
   Stemcell](./stemcells.html).

1. Follow the procedure in [Importing and managing
   stemcells](https://docs.pivotal.io/ops-manager/2-10/opsguide/managing-stemcells.html) to upload
   the Windows stemcell to <%= vars.windows_runtime_abbr %>.

<p class='note'><strong>Note:</strong> If you use vSphere, you must create your own stemcell.
The default root disk size of Windows stemcells v2019.x line is 30&nbsp;GB.
VMware recommends setting the root disk size of your Windows stemcell for vSphere to 30&nbsp;GB.
For more information, see <a href="create-vsphere-stemcell-automatically.html">Creating a Windows Stemcell
for vSphere Using stembuild</a>.
</p>

## <a id='deploy'></a> Deploying the tile

After uploading the Windows stemcell to the <%= vars.windows_runtime_abbr %> tile, you are ready to
deploy the tile.

To deploy the <%= vars.windows_runtime_abbr %> tile:

1. Go to the Ops Manager Installation Dashboard.

1. Click **Review Pending Changes**.

1. Select the <%= vars.windows_runtime_abbr %> tile and review the changes. For more information,
   see [Reviewing Pending Product
   Changes](https://docs.pivotal.io/ops-manager/2-10/install/review-pending-changes.html).

1. Click **Apply Changes**.

## <a id='copy'></a> (Optional) Creating more tiles

To run Windows Diego Cells in multiple isolation segments, you must create and configure additional
<%= vars.windows_runtime_abbr %> tiles. For more information, see [Windows Diego Cells in Isolation
Segments](./isolation.html).


## <a id='air-gapped'></a> Installing and configuring <%= vars.windows_runtime_abbr %> in an air-gapped environment

To install, configure, and deploy <%= vars.windows_runtime_abbr %> in an air-gapped environment:

1. Follow the steps in [Preparing a Windows Rootfs Image in a Private Registry](#prepare-registry).

2. Follow the steps in [Install the Tile](#install) with the following exceptions:
    * To add the Windows Server container base image to the product file, replace the
      Internet-enabled `winfs-injector` command line with the `winfs-injector` procedure in [Adding the
      Windows Server Container Base image to the product file](#add-win-image-air-gapped).
3. Configure required settings for the tile. See [Configuring the tile](#config).
4. Configure resources for the tile. See [Configuring tile resources](#resources).
5. Upload the Windows stemcell to the tile. See [Uploading the stemcell](#stemcells).
6. Deploy the tile. See [Deploying the tile](#deploy).

### <a id='prepare-registry'></a> Preparing a Windows rootfs image in a private registry

To create a <%= vars.windows_runtime_abbr %> tile, a windows file-system container image is
typically fetched from a Docker registry. An administrator can fetch the windows file-system image
from either [DockerHub](https://hub.docker.com/r/cloudfoundry/windows2016fs), the publicly hosted
DockerHub repository, or a privately hosted container image registry.

To prepare a windows file-system container image in a private registry:

1. Create an accessible Windows Server 2019 machine in your environment.
1. Install Docker on this Windows Server 2019 machine.
1. Configure this Windows machine’s Docker daemon to allow non-redistributable artifacts to be
pushed to your private registry. For information about configuring your Docker daemon, see the
[Docker
documentation](https://docs.docker.com/engine/reference/commandline/dockerd/#allow-push-of-nondistributable-artifacts).
1. Open a shell on the Windows machine.
2. To download the windows file-system container image, run the following command:

    ```console
    docker pull cloudfoundry/windows2016fs:2019
    ```

3. To tag the Windows container image, run the following command:

    ```console
    docker tag cloudfoundry/windows2016fs:2019  REGISTRY-ROOT/cloudfoundry/windows2016fs:2019
    ```

    Where `REGISTRY-ROOT` is your private registry’s URI.

4. To upload the Windows Container image to your accessible private registry, run the following
command:

    ```console
    docker push IMAGE-URI
    ```

    Where `IMAGE-URI` is the URI to the Windows rootfs image in your private registry. Your image
    URI must follow the pattern: `my.private.registry/cloudfoundry/windows2016fs:2019`.

### <a id='add-win-image-air-gapped'></a> Adding the Windows Server container base image to the product file

To add the Windows Server container base image to the product file in an air-gapped environment, run
the following:

```console
winfs-injector ^
  --input-tile PASW-DOWNLOAD-PATH ^
  --output-tile PASW-IMPORTABLE-PATH ^
  --registry PASW-REGISTRY-URI
```

Where:

   * `PASW-DOWNLOAD-PATH` is the path and filename to the PASW product file you downloaded.
   * `PASW-IMPORTABLE-PATH` is the output path for the importable product file.
   * `PASW-REGISTRY-URI` is the URI to the container registry hosting your
     cloudfoundry/windows2016fs image.

For example:

<pre class="terminal">
C:\Users\admin> winfs-injector ^
--input-tile c:\temp\pas-windows-2.6.0-build.1.pivotal ^
--output-tile c:\temp\pas-windows-2.6.0-build.1-INJECTED.pivotal ^
--registry https<span>:</span>//my.registry.com
</pre>

For information about troubleshooting `winfs-injector`, see [Missing Local Certificates for Windows
File System Injector](./troubleshooting.html#missing-certs-winfs-issues) in _Troubleshooting Windows
Diego Cells_.
