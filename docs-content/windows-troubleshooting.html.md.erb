---
title: Troubleshooting Windows Cells 
owner: Greenhouse
---

<strong><%= modified_date %></strong>

This topic describes how to troubleshoot Windows cells deployed by Pivotal Cloud Foundry (PCF) Runtime for Windows.

##<a id='logs'></a> Retrieve Logs

Perform the following steps to retrieve the logs for the Windows cell:

1. Navigate to the Ops Manager Installation Dashboard.
1. Click the **PCF Runtime for Windows** tile.
1. Click the **Status** tab.
1. Under the **Logs** column, click the download icon for the Windows cell you want to retrieve logs from.
1. Click the **Logs** tab.
1. When the logs are ready, click the filename to download them.
1. Unzip the file to examine the contents. Each component on the cell has its own logs directory:
	* `/consul_agent_windows/`
	* `/garden-windows/`
	* `/metron_agent_windows/`
	* `/rep_windows/`

Hakim is a diagnostic tool that reveals common configuration issues with Windows cells. Because PCF Runtime for Windows runs Hakim as a BOSH job, the logs may include Hakim error messages. Refer to the [section](#hakim-error) below for a list of Hakim error messages and their possible solutions.

###<a id='hakim-error'></a> Hakim Error Messages

**Processes**

`The following processes are not running`

This usually indicates a failed deployment. Try [redeploying](deploy-windows.html) the PCF Runtime for Windows tile.

<hr>

**NTP**

`There was an error detecting ntp synchronization on your machine.
An accurate system clock is essential for internal Cloud Foundry metric reports.
Please configure your NTP settings, if not already done.
We recommend that your firewall have outbound rules set for UDP on port 123.
In addition, ensure that your 'DnsCache' service is running`

If NTP is not configured, clock skew with other PCF components can occur. Clock skew can result in odd errors, such as not receiving any metrics from apps running on the affected machine. Ensure that you are using the same NTP server on your Windows cell as the rest of your PCF deployment.

<hr>

**Firewall** 

`Windows firewall service is not enabled. The Windows firewall is required in order to enforce Application Security Group rules. Running without the firewall is possible, but strongly not recommended.`

 Garden Windows enforces PCF security group settings for apps running on the Windows cell through the Windows firewall. Apps can run without this, but security groups do not work correctly and apps have unrestricted network access. 

 To resolve this error, enable the Windows firewall. Perform the following steps in your RDP session to access the Windows firewall configuration:

 1. Open the Server Manager from the task bar.
 1. Click **Tools** in the upper right and select **Windows Firewall with Advanced Security**.
 1. Configure and enable the Windows firewall.

 <hr>

**Fair Share**

`Fair Share CPU Scheduling must be disabled`

You must disable Fair Share CPU scheduling for your Windows cell to function properly. Perform the following steps in your RDP session:

1. Open the Registry Editor at `C:\Windows\regedit.exe`. 
1. Navigate to `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Quota System\`.
1. Double-click the `EnableCpuQuota` value.
1. Change the **Value data** from `1` to `0`.
1. Click **OK**.

<hr>

**Container**

`Failed to create container`

This usually indicates an issue with the Windows containerization service. Contact [Pivotal Support](https://support.pivotal.io/) and provide the full output of this error.

<hr>

**Consul**

`Failed to resolve consul host`

This usually indicates interference with DNS resolution on your Windows cell. To resolve this error, perform the following steps in your RDP session to set `127.0.0.1` as the primary DNS server for the active network adapter:

1. Open the Control Panel.
1. Click **Network and Internet**
1. Click **Network and Sharing Center**.
1. Click **Change adapter settings** on the left.
1. Double-click your active network adapter.
1. Click **Properties**.
1. Select **Internet Protocol Version 4 (TCP/IPv4)**.
1. Click **Properties**.
1. Ensure that **Use the following DNS server addresses** is selected and enter `127.0.0.1` for **Preferred DNS server**.
1. Click **OK**. 

##<a id='connect'></a> Connect to the Windows Cell
There are two supported ways to connect to your Windows VMs, SSH and RDP.

###<a id='ssh'></a> SSH
You  can find information about setting up SSH [here](../windows/deploy-windows.html#config).

###<a id='rdp'></a> RDP
Perform the following steps to connect to your Windows cell to run diagnostics:

1. Download and install a Remote Desktop Protocol (RDP) client.
	* For Mac OS X, download the Microsoft Remote Desktop app from the [Mac App Store](https://itunes.apple.com/us/app/microsoft-remote-desktop/id715768417?mt=12).
	* For Windows, download the Microsoft Remote Desktop app from [Microsoft](https://www.microsoft.com/en-us/store/p/microsoft-remote-desktop/9wzdncrfj3ps).
	* For Linux/UNIX, download an RDP client like [rdesktop](http://www.rdesktop.org/).

1. Add the `enable_rdp` addon from the [windows-utilities-release](https://github.com/cloudfoundry-incubator/windows-utilities-release) to your bosh `runtime-config`. You can access your runtime config with `bosh runtime-config`. Here is an example runtime config that utilizes the `enable_rdp` addon:
   <pre><code><span>releases:</span>
   <span>- name: windows-utilities</span>
   <span>  version: \<Release Version\></span>
   <span></span>
   <span>addons:</span>
   <span>- name: enable\_rdp</span>
   <span>  jobs:</span>
   <span>  - name: enable\_rdp</span>
   <span>    release: windows-utilities</span>
   </code></pre>

   Be certain that the windows-utlities release has been uploaded by checking the windows-utilities release version:
      <pre class="terminal"> $ bosh releases </pre>If you discover that `windows-utilities` is missing, follow [these instructions](https://bosh.io/docs/create-release.html#dev-release).

Next, upload the `runtime-config`. **Note:** The runtime config applies to all VMS in your bosh cluster. And therefore will enable RDP on all windows VMs.
      <pre class="terminal"> $ bosh update runtime-config &lt;runtime config filename&gt; </pre>

Run the following command to retrieve the IP address of the Windows cell you would like to connect to:
      <pre class="terminal"> $ bosh vms </pre>

####Obtain login credentials for your Windows cell.
   - If you have ssh enabled (via the [windows-utilities-release](https://github.com/cloudfoundry-incubator/windows-utilities-release) ) you may ssh into the target vm and create a new user and password that can be used to to rdp. This will work on all IasS. However, it is recommended to not use the username `Administrator` as not all IasS make that username available by default.
   <pre><code>NET.exe USER &lt;username&gt; &lt;password&gt; /ADD
   NET.exe LOCALGROUP Administrators &lt;username&gt; /ADD
   </code></pre>
   - If you are using AWS or vSphere and chose **Set the password** under **VM Options** > **Manage Administrator Password** when you configured the PCF Runtime for Windows tile, the username is `Administrator` and the password is the password you entered. **Note:** This will not work for GCP or Azure
   - If you chose **Use Random Administrator Password** when you configured the tile or are using Azure or GCP:
	   * **[Google Cloud Platform (GCP)](https://cloud.google.com/compute/docs/instances/windows/connecting-to-windows-instance)**:
	   * **[Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/connect-logon)**
	   * **vSphere** or **Amazon Web Services (AWS)**: There is no way to obtain the current Administrator password through the IaaS, because the BOSH agent randomized the password. To log into a Windows cell as admin, you need to configure the PCF Runtime Tile with **VM Options** > **Set the Password**. Make sure to apply your changes. Otherwise, you can access cell VMs using SSH and follow the SSH instructions above. Or you can use the `Set-Password` job in the [windows-utilities-release](https://github.com/cloudfoundry-incubator/windows-utilities-release).

####Establish an RDP connection
  - Open your RDP client. The examples below use the Microsoft Remote Desktop app.

  - Click **New** and enter your connection information:
	<%= image_tag('rdp-connect.png') %>
	* **Connection name**: Enter a name for this connection.
	* **PC name**: Enter the IP address of your Windows cell.
	* **User name**: Enter the appropriate username.
	* **Password**: Enter the password of your Windows cell that you created.

1. To mount a directory on your local machine as a drive in the Windows cell, perform the following steps:
	1. From the same **Edit Remote Desktops** window as above, click **Redirection**.
	1. Click the plus icon at the bottom left. 
	<%= image_tag('rdp-redirection.png') %>
	1. For **Name**, enter the name of the drive as it will appear in the Windows cell. For **Path**, enter the path of the local directory. 
	1. Click **OK**.

1. Close the **Edit Remote Desktops** window and double-click the newly added connection under **My Desktops** to open a RDP connection to the Windows cell.

1. In the RDP session, you can use the [Consul CLI](#consul) to diagnose problems with your Windows cell.

**Notes:** 

  - **For vSphere**, it is also possible to connect to your windows cell using the vCenter console once the Administrator password has been set.

  - **If the Windows Cell does not have a public IP** and you are not in the same subnet, you can access the cell by tunnelling through the Ops Manager VM. To do this, SSH into the opsman vm with the flag `-L 3389:<Windows Cell IP>:3389`
    and then use IP 127.0.0.1 from your RDP client.



###<a id='consul'></a> Consul CLI

Perform the following steps to use the Consul CLI on your Windows cell to diagnose problems with your Consul cluster:

1. In your RDP session, open a PowerShell window.
1. Change into the directory that contains the Consul CLI binary:
	<pre class="terminal">
	PS C:\Users\Administrator> cd C:\var\vcap\packages\consul-windows\bin\ 
	</pre>
1. Use the Consul CLI to list the members of your Consul cluster:
	<pre class="terminal">
	PS C:\Users\Administrator\var\vcap\packages\consul-windows\bin\> .\consul.exe members
	Node                       Address          Status  Type    Build  Protocol  DC
	cell-windows-0             10.0.0.111:8301  alive   client  0.6.4  2         dc1
	cloud-controller-0         10.0.0.94:8301   alive   client  0.6.4  2         dc1
	cloud-controller-worker-0  10.0.0.99:8301   alive   client  0.6.4  2         dc1
	consul-server-0            10.0.0.96:8301   alive   server  0.6.4  2         dc1
	diego-brain-0              10.0.0.109:8301  alive   client  0.6.4  2         dc1
	diego-cell-0               10.0.0.103:8301  alive   client  0.6.4  2         dc1
	diego-cell-1               10.0.0.104:8301  alive   client  0.6.4  2         dc1
	diego-cell-2               10.0.0.107:8301  alive   client  0.6.4  2         dc1
	diego-database-0           10.0.0.92:8301   alive   client  0.6.4  2         dc1
	ha-proxy-0                 10.0.0.254:8301  alive   client  0.6.4  2         dc1
	nfs-server-0               10.0.0.100:8301  alive   client  0.6.4  2         dc1
	router-0                   10.0.0.105:8301  alive   client  0.6.4  2         dc1
	uaa-0                      10.0.0.93:8301   alive   client  0.6.4  2         dc1
	</pre>
1. Examine the output to ensure that the `cell-windows-0` service is registered in the Consul cluster and is `alive`. Otherwise, your Windows cell cannot communicate with your PCF deployment and developers cannot push .NET apps to the Windows cell. Check the configuration of your Consul cluster, and ensure that your certificates are not missing or misconfigured.
